
window_auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080012b4  080012b4  000022b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012e4  080012e4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080012e4  080012e4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012e4  080012e4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012e4  080012e4  000022e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012e8  080012e8  000022e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080012ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  080012f8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080012f8  00003040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021a8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc3  00000000  00000000  000051dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00005ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000025a  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df0a  00000000  00000000  00006442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004311  00000000  00000000  0001434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548e6  00000000  00000000  0001865d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006cf43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a08  00000000  00000000  0006cf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0006d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800129c 	.word	0x0800129c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800129c 	.word	0x0800129c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fab8 	bl	8000798 <HAL_Init>

  /* USER CODE BEGIN Init */
auto_window_gpio();
 8000228:	f000 f848 	bl	80002bc <auto_window_gpio>
SysTick_Init();
 800022c:	f000 f9f6 	bl	800061c <SysTick_Init>
//SystemClock_Config();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f803 	bl	800023a <SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  auto_up_down();
 8000234:	f000 f8aa 	bl	800038c <auto_up_down>
 8000238:	e7fc      	b.n	8000234 <main+0x14>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b091      	sub	sp, #68	@ 0x44
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2410      	movs	r4, #16
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f000 fffa 	bl	8001244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	003b      	movs	r3, r7
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f000 fff3 	bl	8001244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	0021      	movs	r1, r4
 8000260:	187b      	adds	r3, r7, r1
 8000262:	2202      	movs	r2, #2
 8000264:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2210      	movs	r2, #16
 8000270:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	187b      	adds	r3, r7, r1
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fba4 	bl	80009c8 <HAL_RCC_OscConfig>
 8000280:	1e03      	subs	r3, r0, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000284:	f000 fa16 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	003b      	movs	r3, r7
 800028a:	2207      	movs	r2, #7
 800028c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028e:	003b      	movs	r3, r7
 8000290:	2200      	movs	r2, #0
 8000292:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	003b      	movs	r3, r7
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	003b      	movs	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	003b      	movs	r3, r7
 80002a2:	2100      	movs	r1, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fea9 	bl	8000ffc <HAL_RCC_ClockConfig>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002ae:	f000 fa01 	bl	80006b4 <Error_Handler>
  }
}
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b011      	add	sp, #68	@ 0x44
 80002b8:	bd90      	pop	{r4, r7, pc}
	...

080002bc <auto_window_gpio>:

/* USER CODE BEGIN 4 */
void auto_window_gpio(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
RCC->AHBENR|=(1<<18);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	@ (800037c <auto_window_gpio+0xc0>)
 80002c2:	695a      	ldr	r2, [r3, #20]
 80002c4:	4b2d      	ldr	r3, [pc, #180]	@ (800037c <auto_window_gpio+0xc0>)
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	02c9      	lsls	r1, r1, #11
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
GPIOB->MODER&=(~(1<<3))&(~(1<<2));//PB1 INPUT (DOOR SWITCH)
 80002ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000380 <auto_window_gpio+0xc4>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000380 <auto_window_gpio+0xc4>)
 80002d4:	210c      	movs	r1, #12
 80002d6:	438a      	bics	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]
GPIOB->MODER&=(~(1<<4))&(~(1<<5));//PB2 INPUT (DOOR SWITCH)
 80002da:	4b29      	ldr	r3, [pc, #164]	@ (8000380 <auto_window_gpio+0xc4>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <auto_window_gpio+0xc4>)
 80002e0:	2130      	movs	r1, #48	@ 0x30
 80002e2:	438a      	bics	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
GPIOB->MODER&=(~(1<<15))&(~(1<<14));//PB7 INPUT (LIMIT SWITCH)
 80002e6:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <auto_window_gpio+0xc4>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b25      	ldr	r3, [pc, #148]	@ (8000380 <auto_window_gpio+0xc4>)
 80002ec:	4925      	ldr	r1, [pc, #148]	@ (8000384 <auto_window_gpio+0xc8>)
 80002ee:	400a      	ands	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
GPIOB->MODER&=(~(1<<8))&(~(1<<9));//PB4 INPUT(LIMIT SWITCH)
 80002f2:	4b23      	ldr	r3, [pc, #140]	@ (8000380 <auto_window_gpio+0xc4>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b22      	ldr	r3, [pc, #136]	@ (8000380 <auto_window_gpio+0xc4>)
 80002f8:	4923      	ldr	r1, [pc, #140]	@ (8000388 <auto_window_gpio+0xcc>)
 80002fa:	400a      	ands	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
GPIOB->MODER|=(1<<10);//PB5 OUTPUT(RELAY R1)
 80002fe:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <auto_window_gpio+0xc4>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b1f      	ldr	r3, [pc, #124]	@ (8000380 <auto_window_gpio+0xc4>)
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	430a      	orrs	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
GPIOB->MODER|=(1<<12);//PB6 OUTPUT(RELAY R2)
 800030c:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <auto_window_gpio+0xc4>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <auto_window_gpio+0xc4>)
 8000312:	2180      	movs	r1, #128	@ 0x80
 8000314:	0149      	lsls	r1, r1, #5
 8000316:	430a      	orrs	r2, r1
 8000318:	601a      	str	r2, [r3, #0]
GPIOB->PUPDR|=1<<3;//PB1 PULL-DOWN
 800031a:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <auto_window_gpio+0xc4>)
 800031c:	68da      	ldr	r2, [r3, #12]
 800031e:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <auto_window_gpio+0xc4>)
 8000320:	2108      	movs	r1, #8
 8000322:	430a      	orrs	r2, r1
 8000324:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR|=1<<5;//PB2 PULL-DOWN
 8000326:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <auto_window_gpio+0xc4>)
 8000328:	68da      	ldr	r2, [r3, #12]
 800032a:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <auto_window_gpio+0xc4>)
 800032c:	2120      	movs	r1, #32
 800032e:	430a      	orrs	r2, r1
 8000330:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR|=1<<15;//PB7 PULL-DOWN
 8000332:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <auto_window_gpio+0xc4>)
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <auto_window_gpio+0xc4>)
 8000338:	2180      	movs	r1, #128	@ 0x80
 800033a:	0209      	lsls	r1, r1, #8
 800033c:	430a      	orrs	r2, r1
 800033e:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR|=1<<9;//PB4 PULL-DOWN
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <auto_window_gpio+0xc4>)
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <auto_window_gpio+0xc4>)
 8000346:	2180      	movs	r1, #128	@ 0x80
 8000348:	0089      	lsls	r1, r1, #2
 800034a:	430a      	orrs	r2, r1
 800034c:	60da      	str	r2, [r3, #12]

GPIOB->PUPDR|=1<<10;//PB5 PULL-UP(Relay 1)
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <auto_window_gpio+0xc4>)
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <auto_window_gpio+0xc4>)
 8000354:	2180      	movs	r1, #128	@ 0x80
 8000356:	00c9      	lsls	r1, r1, #3
 8000358:	430a      	orrs	r2, r1
 800035a:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR|=1<<12;//PB6 PULL-UP(Relay 2)
 800035c:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <auto_window_gpio+0xc4>)
 800035e:	68da      	ldr	r2, [r3, #12]
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <auto_window_gpio+0xc4>)
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	0149      	lsls	r1, r1, #5
 8000366:	430a      	orrs	r2, r1
 8000368:	60da      	str	r2, [r3, #12]

GPIOB->ODR|=(1<<5)|(1<<6);//Initially realay should OFF
 800036a:	4b05      	ldr	r3, [pc, #20]	@ (8000380 <auto_window_gpio+0xc4>)
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <auto_window_gpio+0xc4>)
 8000370:	2160      	movs	r1, #96	@ 0x60
 8000372:	430a      	orrs	r2, r1
 8000374:	615a      	str	r2, [r3, #20]
}
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021000 	.word	0x40021000
 8000380:	48000400 	.word	0x48000400
 8000384:	ffff3fff 	.word	0xffff3fff
 8000388:	fffffcff 	.word	0xfffffcff

0800038c <auto_up_down>:
/*-----------------------------------------------------------------------------------*/
void auto_up_down(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
 8000390:	e004      	b.n	800039c <auto_up_down+0x10>
	{
	 k=1;
	 delay_ms(5);
	 if((GPIOB->IDR>>1&1)==0)
	 {
		 goto sw1;
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	e002      	b.n	800039c <auto_up_down+0x10>
		 press_time1++;
		 if(press_time1>1000)
		 {
			 if((GPIOB->IDR>>7&1)==1)
			 {
				 goto sw1;
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	e000      	b.n	800039c <auto_up_down+0x10>
			 press_time2++;
			 if(press_time2>1000)
			 {
				 if((GPIOB->IDR>>4&1)==1)
				 {
					 goto sw1;
 800039a:	46c0      	nop			@ (mov r8, r8)
 sw1:if((GPIOB->IDR>>1 &1)==1)
 800039c:	4b7a      	ldr	r3, [pc, #488]	@ (8000588 <auto_up_down+0x1fc>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	085b      	lsrs	r3, r3, #1
 80003a2:	2201      	movs	r2, #1
 80003a4:	4013      	ands	r3, r2
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d000      	beq.n	80003ac <auto_up_down+0x20>
 80003aa:	e06f      	b.n	800048c <auto_up_down+0x100>
	 k=1;
 80003ac:	4b77      	ldr	r3, [pc, #476]	@ (800058c <auto_up_down+0x200>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	601a      	str	r2, [r3, #0]
	 delay_ms(5);
 80003b2:	2005      	movs	r0, #5
 80003b4:	f000 f968 	bl	8000688 <delay_ms>
	 if((GPIOB->IDR>>1&1)==0)
 80003b8:	4b73      	ldr	r3, [pc, #460]	@ (8000588 <auto_up_down+0x1fc>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	2202      	movs	r2, #2
 80003be:	4013      	ands	r3, r2
 80003c0:	d0e7      	beq.n	8000392 <auto_up_down+0x6>
	 press_time1=0;
 80003c2:	4b73      	ldr	r3, [pc, #460]	@ (8000590 <auto_up_down+0x204>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
	 while((GPIOB->IDR>>1&1)==1)
 80003c8:	e058      	b.n	800047c <auto_up_down+0xf0>
		 SysTick_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 f93c 	bl	8000648 <SysTick_Delay>
		 press_time1++;
 80003d0:	4b6f      	ldr	r3, [pc, #444]	@ (8000590 <auto_up_down+0x204>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	1c5a      	adds	r2, r3, #1
 80003d6:	4b6e      	ldr	r3, [pc, #440]	@ (8000590 <auto_up_down+0x204>)
 80003d8:	601a      	str	r2, [r3, #0]
		 if(press_time1>1000)
 80003da:	4b6d      	ldr	r3, [pc, #436]	@ (8000590 <auto_up_down+0x204>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	23fa      	movs	r3, #250	@ 0xfa
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d94a      	bls.n	800047c <auto_up_down+0xf0>
			 if((GPIOB->IDR>>7&1)==1)
 80003e6:	4b68      	ldr	r3, [pc, #416]	@ (8000588 <auto_up_down+0x1fc>)
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	09db      	lsrs	r3, r3, #7
 80003ec:	2201      	movs	r2, #1
 80003ee:	4013      	ands	r3, r2
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d0d0      	beq.n	8000396 <auto_up_down+0xa>
				 k=22;
 80003f4:	4b65      	ldr	r3, [pc, #404]	@ (800058c <auto_up_down+0x200>)
 80003f6:	2216      	movs	r2, #22
 80003f8:	601a      	str	r2, [r3, #0]
			 auto_motor_down();
 80003fa:	f000 f8e9 	bl	80005d0 <auto_motor_down>
			 while(!(GPIOB->IDR>>4&1))
 80003fe:	e030      	b.n	8000462 <auto_up_down+0xd6>
				 press_time4=0;
 8000400:	4b64      	ldr	r3, [pc, #400]	@ (8000594 <auto_up_down+0x208>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
				 l:if((GPIOB->IDR>>2&1)==1)
 8000406:	4b60      	ldr	r3, [pc, #384]	@ (8000588 <auto_up_down+0x1fc>)
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	2201      	movs	r2, #1
 800040e:	4013      	ands	r3, r2
 8000410:	2b01      	cmp	r3, #1
 8000412:	d126      	bne.n	8000462 <auto_up_down+0xd6>
					 delay_ms(5);
 8000414:	2005      	movs	r0, #5
 8000416:	f000 f937 	bl	8000688 <delay_ms>
					 if((GPIOB->IDR>>2&1)==0)
 800041a:	4b5b      	ldr	r3, [pc, #364]	@ (8000588 <auto_up_down+0x1fc>)
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	2204      	movs	r2, #4
 8000420:	4013      	ands	r3, r2
 8000422:	d117      	bne.n	8000454 <auto_up_down+0xc8>
						 goto l;
 8000424:	e7ef      	b.n	8000406 <auto_up_down+0x7a>
						 SysTick_Delay(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 f90e 	bl	8000648 <SysTick_Delay>
						 press_time4++;
 800042c:	4b59      	ldr	r3, [pc, #356]	@ (8000594 <auto_up_down+0x208>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	4b58      	ldr	r3, [pc, #352]	@ (8000594 <auto_up_down+0x208>)
 8000434:	601a      	str	r2, [r3, #0]
						 if(press_time4>500)
 8000436:	4b57      	ldr	r3, [pc, #348]	@ (8000594 <auto_up_down+0x208>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	23fa      	movs	r3, #250	@ 0xfa
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	429a      	cmp	r2, r3
 8000440:	d908      	bls.n	8000454 <auto_up_down+0xc8>
							 auto_motor_stop();
 8000442:	f000 f8dd 	bl	8000600 <auto_motor_stop>
							 while(GPIOB->IDR>>2&1);
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	4b4f      	ldr	r3, [pc, #316]	@ (8000588 <auto_up_down+0x1fc>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	2204      	movs	r2, #4
 800044e:	4013      	ands	r3, r2
 8000450:	d1fa      	bne.n	8000448 <auto_up_down+0xbc>
							 goto sw1;
 8000452:	e7a3      	b.n	800039c <auto_up_down+0x10>
					 while((GPIOB->IDR>>2&1)==1)
 8000454:	4b4c      	ldr	r3, [pc, #304]	@ (8000588 <auto_up_down+0x1fc>)
 8000456:	691b      	ldr	r3, [r3, #16]
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	2201      	movs	r2, #1
 800045c:	4013      	ands	r3, r2
 800045e:	2b01      	cmp	r3, #1
 8000460:	d0e1      	beq.n	8000426 <auto_up_down+0x9a>
			 while(!(GPIOB->IDR>>4&1))
 8000462:	4b49      	ldr	r3, [pc, #292]	@ (8000588 <auto_up_down+0x1fc>)
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	2210      	movs	r2, #16
 8000468:	4013      	ands	r3, r2
 800046a:	d0c9      	beq.n	8000400 <auto_up_down+0x74>
			 auto_motor_stop();
 800046c:	f000 f8c8 	bl	8000600 <auto_motor_stop>
			 while((GPIOB->IDR>>1&1));
 8000470:	46c0      	nop			@ (mov r8, r8)
 8000472:	4b45      	ldr	r3, [pc, #276]	@ (8000588 <auto_up_down+0x1fc>)
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	2202      	movs	r2, #2
 8000478:	4013      	ands	r3, r2
 800047a:	d1fa      	bne.n	8000472 <auto_up_down+0xe6>
	 while((GPIOB->IDR>>1&1)==1)
 800047c:	4b42      	ldr	r3, [pc, #264]	@ (8000588 <auto_up_down+0x1fc>)
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	085b      	lsrs	r3, r3, #1
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	2b01      	cmp	r3, #1
 8000488:	d09f      	beq.n	80003ca <auto_up_down+0x3e>
 800048a:	e004      	b.n	8000496 <auto_up_down+0x10a>
		k=9;
 800048c:	4b3f      	ldr	r3, [pc, #252]	@ (800058c <auto_up_down+0x200>)
 800048e:	2209      	movs	r2, #9
 8000490:	601a      	str	r2, [r3, #0]
		auto_motor_stop();
 8000492:	f000 f8b5 	bl	8000600 <auto_motor_stop>
 sw2:if((GPIOB->IDR>>2 &1)==1)
 8000496:	4b3c      	ldr	r3, [pc, #240]	@ (8000588 <auto_up_down+0x1fc>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	2201      	movs	r2, #1
 800049e:	4013      	ands	r3, r2
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d000      	beq.n	80004a6 <auto_up_down+0x11a>
 80004a4:	e06b      	b.n	800057e <auto_up_down+0x1f2>
		 delay_ms(5);
 80004a6:	2005      	movs	r0, #5
 80004a8:	f000 f8ee 	bl	8000688 <delay_ms>
		 if((GPIOB->IDR>>2&1)==0)
 80004ac:	4b36      	ldr	r3, [pc, #216]	@ (8000588 <auto_up_down+0x1fc>)
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	2204      	movs	r2, #4
 80004b2:	4013      	ands	r3, r2
 80004b4:	d100      	bne.n	80004b8 <auto_up_down+0x12c>
			 goto sw2;
 80004b6:	e7ee      	b.n	8000496 <auto_up_down+0x10a>
		 press_time2=0;
 80004b8:	4b37      	ldr	r3, [pc, #220]	@ (8000598 <auto_up_down+0x20c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
		 while((GPIOB->IDR>>2&1)==1)
 80004be:	e056      	b.n	800056e <auto_up_down+0x1e2>
			 SysTick_Delay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 f8c1 	bl	8000648 <SysTick_Delay>
			 press_time2++;
 80004c6:	4b34      	ldr	r3, [pc, #208]	@ (8000598 <auto_up_down+0x20c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <auto_up_down+0x20c>)
 80004ce:	601a      	str	r2, [r3, #0]
			 if(press_time2>1000)
 80004d0:	4b31      	ldr	r3, [pc, #196]	@ (8000598 <auto_up_down+0x20c>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	23fa      	movs	r3, #250	@ 0xfa
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	429a      	cmp	r2, r3
 80004da:	d948      	bls.n	800056e <auto_up_down+0x1e2>
				 if((GPIOB->IDR>>4&1)==1)
 80004dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000588 <auto_up_down+0x1fc>)
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	091b      	lsrs	r3, r3, #4
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d100      	bne.n	80004ec <auto_up_down+0x160>
 80004ea:	e756      	b.n	800039a <auto_up_down+0xe>
				 }
				 else
				 {
				 auto_motor_up();
 80004ec:	f000 f858 	bl	80005a0 <auto_motor_up>
				 }
				 while(!(GPIOB->IDR>>7&1))
 80004f0:	e030      	b.n	8000554 <auto_up_down+0x1c8>
				 {
					 press_time3=0;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <auto_up_down+0x210>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
					 l1:if((GPIOB->IDR>>1&1)==1)
 80004f8:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <auto_up_down+0x1fc>)
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	085b      	lsrs	r3, r3, #1
 80004fe:	2201      	movs	r2, #1
 8000500:	4013      	ands	r3, r2
 8000502:	2b01      	cmp	r3, #1
 8000504:	d126      	bne.n	8000554 <auto_up_down+0x1c8>
					 {
						 delay_ms(5);
 8000506:	2005      	movs	r0, #5
 8000508:	f000 f8be 	bl	8000688 <delay_ms>
						 if((GPIOB->IDR>>1&1)==0)
 800050c:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <auto_up_down+0x1fc>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	2202      	movs	r2, #2
 8000512:	4013      	ands	r3, r2
 8000514:	d117      	bne.n	8000546 <auto_up_down+0x1ba>
						 {
							goto l1;
 8000516:	e7ef      	b.n	80004f8 <auto_up_down+0x16c>
						 }
						 while((GPIOB->IDR>>1&1)==1)
						 {
							 SysTick_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f000 f895 	bl	8000648 <SysTick_Delay>
							 press_time3++;
 800051e:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <auto_up_down+0x210>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <auto_up_down+0x210>)
 8000526:	601a      	str	r2, [r3, #0]
							 if(press_time3>500)
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <auto_up_down+0x210>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	23fa      	movs	r3, #250	@ 0xfa
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	429a      	cmp	r2, r3
 8000532:	d908      	bls.n	8000546 <auto_up_down+0x1ba>
							 {
								 auto_motor_stop();
 8000534:	f000 f864 	bl	8000600 <auto_motor_stop>
								 while(GPIOB->IDR>>1&1);
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <auto_up_down+0x1fc>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	2202      	movs	r2, #2
 8000540:	4013      	ands	r3, r2
 8000542:	d1fa      	bne.n	800053a <auto_up_down+0x1ae>
								 goto sw1;
 8000544:	e72a      	b.n	800039c <auto_up_down+0x10>
						 while((GPIOB->IDR>>1&1)==1)
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <auto_up_down+0x1fc>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	085b      	lsrs	r3, r3, #1
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	2b01      	cmp	r3, #1
 8000552:	d0e1      	beq.n	8000518 <auto_up_down+0x18c>
				 while(!(GPIOB->IDR>>7&1))
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <auto_up_down+0x1fc>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	4013      	ands	r3, r2
 800055c:	d0c9      	beq.n	80004f2 <auto_up_down+0x166>
							 }
						 }
					 }
				 }
				 auto_motor_stop();
 800055e:	f000 f84f 	bl	8000600 <auto_motor_stop>
				 while(GPIOB->IDR>>2&1);
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <auto_up_down+0x1fc>)
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	2204      	movs	r2, #4
 800056a:	4013      	ands	r3, r2
 800056c:	d1fa      	bne.n	8000564 <auto_up_down+0x1d8>
		 while((GPIOB->IDR>>2&1)==1)
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <auto_up_down+0x1fc>)
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	2b01      	cmp	r3, #1
 800057a:	d0a1      	beq.n	80004c0 <auto_up_down+0x134>
	{
		auto_motor_stop();
	}


}
 800057c:	e001      	b.n	8000582 <auto_up_down+0x1f6>
		auto_motor_stop();
 800057e:	f000 f83f 	bl	8000600 <auto_motor_stop>
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	48000400 	.word	0x48000400
 800058c:	20000028 	.word	0x20000028
 8000590:	2000002c 	.word	0x2000002c
 8000594:	20000038 	.word	0x20000038
 8000598:	20000030 	.word	0x20000030
 800059c:	20000034 	.word	0x20000034

080005a0 <auto_motor_up>:
/*-------------------------------------------------------------------------------------*/
void auto_motor_up(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    GPIOB->ODR|=(1<<6);//RELAY R1 OFF
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <auto_motor_up+0x2c>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <auto_motor_up+0x2c>)
 80005aa:	2140      	movs	r1, #64	@ 0x40
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
    delay_ms(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 f869 	bl	8000688 <delay_ms>
	GPIOB->BSRR|=(1<<5)<<16;//RELAY R2 ON
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <auto_motor_up+0x2c>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <auto_motor_up+0x2c>)
 80005bc:	2180      	movs	r1, #128	@ 0x80
 80005be:	0389      	lsls	r1, r1, #14
 80005c0:	430a      	orrs	r2, r1
 80005c2:	619a      	str	r2, [r3, #24]
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	48000400 	.word	0x48000400

080005d0 <auto_motor_down>:
/*-------------------------------------------------------------------------------------*/
void auto_motor_down(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    GPIOB->ODR|=(1<<5);//RELAY R2 OFF
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <auto_motor_down+0x2c>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <auto_motor_down+0x2c>)
 80005da:	2120      	movs	r1, #32
 80005dc:	430a      	orrs	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
    delay_ms(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f851 	bl	8000688 <delay_ms>
	GPIOB->BSRR|=(1<<6)<<16;//RELAY R1 ON
 80005e6:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <auto_motor_down+0x2c>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <auto_motor_down+0x2c>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	03c9      	lsls	r1, r1, #15
 80005f0:	430a      	orrs	r2, r1
 80005f2:	619a      	str	r2, [r3, #24]
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	48000400 	.word	0x48000400

08000600 <auto_motor_stop>:
/*-------------------------------------------------------------------------------------*/
void auto_motor_stop(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	GPIOB->ODR|=(1<<5)|(1<<6);//BOTH RELAY OFF
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <auto_motor_stop+0x18>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	4b03      	ldr	r3, [pc, #12]	@ (8000618 <auto_motor_stop+0x18>)
 800060a:	2160      	movs	r1, #96	@ 0x60
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	48000400 	.word	0x48000400

0800061c <SysTick_Init>:
/*--------------------------------------------------------------------------------------*/
void SysTick_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    SysTick->LOAD = 8000 - 1;// Set reload register for 1 ms delay
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <SysTick_Init+0x24>)
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <SysTick_Init+0x28>)
 8000624:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;// Clear the current value register
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <SysTick_Init+0x24>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL |= (1 << 2) | (1 << 0);// Set the clock source to processor clock (AHB) and enable SysTick
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <SysTick_Init+0x24>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <SysTick_Init+0x24>)
 8000632:	2105      	movs	r1, #5
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	e000e010 	.word	0xe000e010
 8000644:	00001f3f 	.word	0x00001f3f

08000648 <SysTick_Delay>:
/*---------------------------------------------------------------------------------------*/
void SysTick_Delay(uint32_t delay_ms)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < delay_ms; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e00c      	b.n	8000670 <SysTick_Delay+0x28>
    {
        SysTick->VAL = 0;// Clear the current value register
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <SysTick_Delay+0x3c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
        while (!(SysTick->CTRL & (1 << 16))); // Wait until the COUNTFLAG is set
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <SysTick_Delay+0x3c>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	2380      	movs	r3, #128	@ 0x80
 8000664:	025b      	lsls	r3, r3, #9
 8000666:	4013      	ands	r3, r2
 8000668:	d0f9      	beq.n	800065e <SysTick_Delay+0x16>
    for (uint32_t i = 0; i < delay_ms; i++)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3ee      	bcc.n	8000656 <SysTick_Delay+0xe>
    }
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	e000e010 	.word	0xe000e010

08000688 <delay_ms>:
  	   anti_pinch();
     }
  return 1;
}
void delay_ms(int dlyms)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	dlyms*=12000;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <delay_ms+0x28>)
 8000694:	4353      	muls	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
	while(dlyms--);
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1fa      	bne.n	800069a <delay_ms+0x12>
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	00002ee0 	.word	0x00002ee0

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x44>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <HAL_MspInit+0x44>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	619a      	str	r2, [r3, #24]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x44>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x44>)
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_MspInit+0x44>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	0549      	lsls	r1, r1, #21
 80006e8:	430a      	orrs	r2, r1
 80006ea:	61da      	str	r2, [r3, #28]
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_MspInit+0x44>)
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	055b      	lsls	r3, r3, #21
 80006f4:	4013      	ands	r3, r2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	e7fd      	b.n	800070c <NMI_Handler+0x4>

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	e7fd      	b.n	8000714 <HardFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f87a 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000748:	f7ff fff7 	bl	800073a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000772:	f000 fd6f 	bl	8001254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fd53 	bl	8000220 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000788:	080012ec 	.word	0x080012ec
  ldr r2, =_sbss
 800078c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000790:	20000040 	.word	0x20000040

08000794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_IRQHandler>
	...

08000798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <HAL_Init+0x24>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_Init+0x24>)
 80007a2:	2110      	movs	r1, #16
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f809 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ae:	f7ff ff87 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_InitTick+0x5c>)
 80007ca:	681c      	ldr	r4, [r3, #0]
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <HAL_InitTick+0x60>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	0019      	movs	r1, r3
 80007d2:	23fa      	movs	r3, #250	@ 0xfa
 80007d4:	0098      	lsls	r0, r3, #2
 80007d6:	f7ff fc97 	bl	8000108 <__udivsi3>
 80007da:	0003      	movs	r3, r0
 80007dc:	0019      	movs	r1, r3
 80007de:	0020      	movs	r0, r4
 80007e0:	f7ff fc92 	bl	8000108 <__udivsi3>
 80007e4:	0003      	movs	r3, r0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 f8e1 	bl	80009ae <HAL_SYSTICK_Config>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e00f      	b.n	8000814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d80b      	bhi.n	8000812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	2200      	movs	r2, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f8be 	bl	8000984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_InitTick+0x64>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b003      	add	sp, #12
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	001a      	movs	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	18d2      	adds	r2, r2, r3
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <HAL_IncTick+0x20>)
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	20000008 	.word	0x20000008
 8000848:	2000003c 	.word	0x2000003c

0800084c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	@ (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	2000003c 	.word	0x2000003c

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b7f      	cmp	r3, #127	@ 0x7f
 8000874:	d828      	bhi.n	80008c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000876:	4a2f      	ldr	r2, [pc, #188]	@ (8000934 <__NVIC_SetPriority+0xd4>)
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b25b      	sxtb	r3, r3
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	33c0      	adds	r3, #192	@ 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	589b      	ldr	r3, [r3, r2]
 8000886:	1dfa      	adds	r2, r7, #7
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	0011      	movs	r1, r2
 800088c:	2203      	movs	r2, #3
 800088e:	400a      	ands	r2, r1
 8000890:	00d2      	lsls	r2, r2, #3
 8000892:	21ff      	movs	r1, #255	@ 0xff
 8000894:	4091      	lsls	r1, r2
 8000896:	000a      	movs	r2, r1
 8000898:	43d2      	mvns	r2, r2
 800089a:	401a      	ands	r2, r3
 800089c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	019b      	lsls	r3, r3, #6
 80008a2:	22ff      	movs	r2, #255	@ 0xff
 80008a4:	401a      	ands	r2, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0018      	movs	r0, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	4003      	ands	r3, r0
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b4:	481f      	ldr	r0, [pc, #124]	@ (8000934 <__NVIC_SetPriority+0xd4>)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	089b      	lsrs	r3, r3, #2
 80008be:	430a      	orrs	r2, r1
 80008c0:	33c0      	adds	r3, #192	@ 0xc0
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008c6:	e031      	b.n	800092c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <__NVIC_SetPriority+0xd8>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0019      	movs	r1, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	400b      	ands	r3, r1
 80008d4:	3b08      	subs	r3, #8
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3306      	adds	r3, #6
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1dfa      	adds	r2, r7, #7
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	400a      	ands	r2, r1
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	21ff      	movs	r1, #255	@ 0xff
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	22ff      	movs	r2, #255	@ 0xff
 8000900:	401a      	ands	r2, r3
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	2303      	movs	r3, #3
 800090a:	4003      	ands	r3, r0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <__NVIC_SetPriority+0xd8>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001c      	movs	r4, r3
 8000918:	230f      	movs	r3, #15
 800091a:	4023      	ands	r3, r4
 800091c:	3b08      	subs	r3, #8
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	430a      	orrs	r2, r1
 8000922:	3306      	adds	r3, #6
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	18c3      	adds	r3, r0, r3
 8000928:	3304      	adds	r3, #4
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b003      	add	sp, #12
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	2380      	movs	r3, #128	@ 0x80
 800094a:	045b      	lsls	r3, r3, #17
 800094c:	429a      	cmp	r2, r3
 800094e:	d301      	bcc.n	8000954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000950:	2301      	movs	r3, #1
 8000952:	e010      	b.n	8000976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <SysTick_Config+0x44>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	3a01      	subs	r2, #1
 800095a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	2103      	movs	r1, #3
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff ff7c 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SysTick_Config+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <SysTick_Config+0x44>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	210f      	movs	r1, #15
 8000990:	187b      	adds	r3, r7, r1
 8000992:	1c02      	adds	r2, r0, #0
 8000994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff5d 	bl	8000860 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ffbf 	bl	800093c <SysTick_Config>
 80009be:	0003      	movs	r3, r0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e301      	b.n	8000fde <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x1e>
 80009e4:	e08d      	b.n	8000b02 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009e6:	4bc3      	ldr	r3, [pc, #780]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	220c      	movs	r2, #12
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d00e      	beq.n	8000a10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009f2:	4bc0      	ldr	r3, [pc, #768]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	220c      	movs	r2, #12
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d116      	bne.n	8000a2c <HAL_RCC_OscConfig+0x64>
 80009fe:	4bbd      	ldr	r3, [pc, #756]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	401a      	ands	r2, r3
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	025b      	lsls	r3, r3, #9
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d10d      	bne.n	8000a2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a10:	4bb8      	ldr	r3, [pc, #736]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	029b      	lsls	r3, r3, #10
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d100      	bne.n	8000a1e <HAL_RCC_OscConfig+0x56>
 8000a1c:	e070      	b.n	8000b00 <HAL_RCC_OscConfig+0x138>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d000      	beq.n	8000a28 <HAL_RCC_OscConfig+0x60>
 8000a26:	e06b      	b.n	8000b00 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e2d8      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d107      	bne.n	8000a44 <HAL_RCC_OscConfig+0x7c>
 8000a34:	4baf      	ldr	r3, [pc, #700]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4bae      	ldr	r3, [pc, #696]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a3a:	2180      	movs	r1, #128	@ 0x80
 8000a3c:	0249      	lsls	r1, r1, #9
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e02f      	b.n	8000aa4 <HAL_RCC_OscConfig+0xdc>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <HAL_RCC_OscConfig+0x9e>
 8000a4c:	4ba9      	ldr	r3, [pc, #676]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4ba8      	ldr	r3, [pc, #672]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a52:	49a9      	ldr	r1, [pc, #676]	@ (8000cf8 <HAL_RCC_OscConfig+0x330>)
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	4ba6      	ldr	r3, [pc, #664]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4ba5      	ldr	r3, [pc, #660]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a5e:	49a7      	ldr	r1, [pc, #668]	@ (8000cfc <HAL_RCC_OscConfig+0x334>)
 8000a60:	400a      	ands	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e01e      	b.n	8000aa4 <HAL_RCC_OscConfig+0xdc>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d10e      	bne.n	8000a8c <HAL_RCC_OscConfig+0xc4>
 8000a6e:	4ba1      	ldr	r3, [pc, #644]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4ba0      	ldr	r3, [pc, #640]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	02c9      	lsls	r1, r1, #11
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	4b9d      	ldr	r3, [pc, #628]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b9c      	ldr	r3, [pc, #624]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	0249      	lsls	r1, r1, #9
 8000a86:	430a      	orrs	r2, r1
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e00b      	b.n	8000aa4 <HAL_RCC_OscConfig+0xdc>
 8000a8c:	4b99      	ldr	r3, [pc, #612]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b98      	ldr	r3, [pc, #608]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a92:	4999      	ldr	r1, [pc, #612]	@ (8000cf8 <HAL_RCC_OscConfig+0x330>)
 8000a94:	400a      	ands	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	4b96      	ldr	r3, [pc, #600]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b95      	ldr	r3, [pc, #596]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000a9e:	4997      	ldr	r1, [pc, #604]	@ (8000cfc <HAL_RCC_OscConfig+0x334>)
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d014      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aac:	f7ff fece 	bl	800084c <HAL_GetTick>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab4:	e008      	b.n	8000ac8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ab6:	f7ff fec9 	bl	800084c <HAL_GetTick>
 8000aba:	0002      	movs	r2, r0
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b64      	cmp	r3, #100	@ 0x64
 8000ac2:	d901      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e28a      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d0f0      	beq.n	8000ab6 <HAL_RCC_OscConfig+0xee>
 8000ad4:	e015      	b.n	8000b02 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad6:	f7ff feb9 	bl	800084c <HAL_GetTick>
 8000ada:	0003      	movs	r3, r0
 8000adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ae0:	f7ff feb4 	bl	800084c <HAL_GetTick>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b64      	cmp	r3, #100	@ 0x64
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e275      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af2:	4b80      	ldr	r3, [pc, #512]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	2380      	movs	r3, #128	@ 0x80
 8000af8:	029b      	lsls	r3, r3, #10
 8000afa:	4013      	ands	r3, r2
 8000afc:	d1f0      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x118>
 8000afe:	e000      	b.n	8000b02 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b00:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2202      	movs	r2, #2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d100      	bne.n	8000b0e <HAL_RCC_OscConfig+0x146>
 8000b0c:	e069      	b.n	8000be2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b0e:	4b79      	ldr	r3, [pc, #484]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	220c      	movs	r2, #12
 8000b14:	4013      	ands	r3, r2
 8000b16:	d00b      	beq.n	8000b30 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b18:	4b76      	ldr	r3, [pc, #472]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d11c      	bne.n	8000b5e <HAL_RCC_OscConfig+0x196>
 8000b24:	4b73      	ldr	r3, [pc, #460]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	025b      	lsls	r3, r3, #9
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d116      	bne.n	8000b5e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b30:	4b70      	ldr	r3, [pc, #448]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2202      	movs	r2, #2
 8000b36:	4013      	ands	r3, r2
 8000b38:	d005      	beq.n	8000b46 <HAL_RCC_OscConfig+0x17e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d001      	beq.n	8000b46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e24b      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b46:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	22f8      	movs	r2, #248	@ 0xf8
 8000b4c:	4393      	bics	r3, r2
 8000b4e:	0019      	movs	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	00da      	lsls	r2, r3, #3
 8000b56:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5c:	e041      	b.n	8000be2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d024      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b66:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b62      	ldr	r3, [pc, #392]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b72:	f7ff fe6b 	bl	800084c <HAL_GetTick>
 8000b76:	0003      	movs	r3, r0
 8000b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7a:	e008      	b.n	8000b8e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b7c:	f7ff fe66 	bl	800084c <HAL_GetTick>
 8000b80:	0002      	movs	r2, r0
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e227      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8e:	4b59      	ldr	r3, [pc, #356]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2202      	movs	r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	d0f1      	beq.n	8000b7c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b98:	4b56      	ldr	r3, [pc, #344]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	22f8      	movs	r2, #248	@ 0xf8
 8000b9e:	4393      	bics	r3, r2
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	00da      	lsls	r2, r3, #3
 8000ba8:	4b52      	ldr	r3, [pc, #328]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e018      	b.n	8000be2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bb0:	4b50      	ldr	r3, [pc, #320]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	438a      	bics	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fe46 	bl	800084c <HAL_GetTick>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fe41 	bl	800084c <HAL_GetTick>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e202      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd8:	4b46      	ldr	r3, [pc, #280]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	4013      	ands	r3, r2
 8000be0:	d1f1      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2208      	movs	r2, #8
 8000be8:	4013      	ands	r3, r2
 8000bea:	d036      	beq.n	8000c5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d019      	beq.n	8000c28 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c00:	f7ff fe24 	bl	800084c <HAL_GetTick>
 8000c04:	0003      	movs	r3, r0
 8000c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c08:	e008      	b.n	8000c1c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fe1f 	bl	800084c <HAL_GetTick>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e1e0      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c1c:	4b35      	ldr	r3, [pc, #212]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c20:	2202      	movs	r2, #2
 8000c22:	4013      	ands	r3, r2
 8000c24:	d0f1      	beq.n	8000c0a <HAL_RCC_OscConfig+0x242>
 8000c26:	e018      	b.n	8000c5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c28:	4b32      	ldr	r3, [pc, #200]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c2c:	4b31      	ldr	r3, [pc, #196]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	438a      	bics	r2, r1
 8000c32:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c34:	f7ff fe0a 	bl	800084c <HAL_GetTick>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c3e:	f7ff fe05 	bl	800084c <HAL_GetTick>
 8000c42:	0002      	movs	r2, r0
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e1c6      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c54:	2202      	movs	r2, #2
 8000c56:	4013      	ands	r3, r2
 8000c58:	d1f1      	bne.n	8000c3e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2204      	movs	r2, #4
 8000c60:	4013      	ands	r3, r2
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x29e>
 8000c64:	e0b4      	b.n	8000dd0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c66:	201f      	movs	r0, #31
 8000c68:	183b      	adds	r3, r7, r0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c70:	69da      	ldr	r2, [r3, #28]
 8000c72:	2380      	movs	r3, #128	@ 0x80
 8000c74:	055b      	lsls	r3, r3, #21
 8000c76:	4013      	ands	r3, r2
 8000c78:	d110      	bne.n	8000c9c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c7c:	69da      	ldr	r2, [r3, #28]
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	0549      	lsls	r1, r1, #21
 8000c84:	430a      	orrs	r2, r1
 8000c86:	61da      	str	r2, [r3, #28]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	69da      	ldr	r2, [r3, #28]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	055b      	lsls	r3, r3, #21
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c96:	183b      	adds	r3, r7, r0
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_RCC_OscConfig+0x338>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d11a      	bne.n	8000cde <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_RCC_OscConfig+0x338>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_RCC_OscConfig+0x338>)
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fdc9 	bl	800084c <HAL_GetTick>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc0:	f7ff fdc4 	bl	800084c <HAL_GetTick>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	@ 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e185      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_RCC_OscConfig+0x338>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10e      	bne.n	8000d04 <HAL_RCC_OscConfig+0x33c>
 8000ce6:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	4b02      	ldr	r3, [pc, #8]	@ (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	621a      	str	r2, [r3, #32]
 8000cf2:	e035      	b.n	8000d60 <HAL_RCC_OscConfig+0x398>
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	fffeffff 	.word	0xfffeffff
 8000cfc:	fffbffff 	.word	0xfffbffff
 8000d00:	40007000 	.word	0x40007000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x35e>
 8000d0c:	4bb6      	ldr	r3, [pc, #728]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d0e:	6a1a      	ldr	r2, [r3, #32]
 8000d10:	4bb5      	ldr	r3, [pc, #724]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	438a      	bics	r2, r1
 8000d16:	621a      	str	r2, [r3, #32]
 8000d18:	4bb3      	ldr	r3, [pc, #716]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d1a:	6a1a      	ldr	r2, [r3, #32]
 8000d1c:	4bb2      	ldr	r3, [pc, #712]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	438a      	bics	r2, r1
 8000d22:	621a      	str	r2, [r3, #32]
 8000d24:	e01c      	b.n	8000d60 <HAL_RCC_OscConfig+0x398>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x380>
 8000d2e:	4bae      	ldr	r3, [pc, #696]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d30:	6a1a      	ldr	r2, [r3, #32]
 8000d32:	4bad      	ldr	r3, [pc, #692]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d34:	2104      	movs	r1, #4
 8000d36:	430a      	orrs	r2, r1
 8000d38:	621a      	str	r2, [r3, #32]
 8000d3a:	4bab      	ldr	r3, [pc, #684]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d3c:	6a1a      	ldr	r2, [r3, #32]
 8000d3e:	4baa      	ldr	r3, [pc, #680]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	621a      	str	r2, [r3, #32]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0x398>
 8000d48:	4ba7      	ldr	r3, [pc, #668]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4ba6      	ldr	r3, [pc, #664]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	438a      	bics	r2, r1
 8000d52:	621a      	str	r2, [r3, #32]
 8000d54:	4ba4      	ldr	r3, [pc, #656]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d56:	6a1a      	ldr	r2, [r3, #32]
 8000d58:	4ba3      	ldr	r3, [pc, #652]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	438a      	bics	r2, r1
 8000d5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d014      	beq.n	8000d92 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d68:	f7ff fd70 	bl	800084c <HAL_GetTick>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d70:	e009      	b.n	8000d86 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d72:	f7ff fd6b 	bl	800084c <HAL_GetTick>
 8000d76:	0002      	movs	r2, r0
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4a9b      	ldr	r2, [pc, #620]	@ (8000fec <HAL_RCC_OscConfig+0x624>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e12b      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d86:	4b98      	ldr	r3, [pc, #608]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_RCC_OscConfig+0x3aa>
 8000d90:	e013      	b.n	8000dba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d92:	f7ff fd5b 	bl	800084c <HAL_GetTick>
 8000d96:	0003      	movs	r3, r0
 8000d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9a:	e009      	b.n	8000db0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fd56 	bl	800084c <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a91      	ldr	r2, [pc, #580]	@ (8000fec <HAL_RCC_OscConfig+0x624>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e116      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db0:	4b8d      	ldr	r3, [pc, #564]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	2202      	movs	r2, #2
 8000db6:	4013      	ands	r3, r2
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dba:	231f      	movs	r3, #31
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc4:	4b88      	ldr	r3, [pc, #544]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	4b87      	ldr	r3, [pc, #540]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000dca:	4989      	ldr	r1, [pc, #548]	@ (8000ff0 <HAL_RCC_OscConfig+0x628>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d063      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12a      	bne.n	8000e38 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000de2:	4b81      	ldr	r3, [pc, #516]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de6:	4b80      	ldr	r3, [pc, #512]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000de8:	2104      	movs	r1, #4
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000dee:	4b7e      	ldr	r3, [pc, #504]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fd27 	bl	800084c <HAL_GetTick>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e04:	f7ff fd22 	bl	800084c <HAL_GetTick>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e0e3      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e16:	4b74      	ldr	r3, [pc, #464]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d0f1      	beq.n	8000e04 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e20:	4b71      	ldr	r3, [pc, #452]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e24:	22f8      	movs	r2, #248	@ 0xf8
 8000e26:	4393      	bics	r3, r2
 8000e28:	0019      	movs	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	00da      	lsls	r2, r3, #3
 8000e30:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e32:	430a      	orrs	r2, r1
 8000e34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e36:	e034      	b.n	8000ea2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	3305      	adds	r3, #5
 8000e3e:	d111      	bne.n	8000e64 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e40:	4b69      	ldr	r3, [pc, #420]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e44:	4b68      	ldr	r3, [pc, #416]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e46:	2104      	movs	r1, #4
 8000e48:	438a      	bics	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e4c:	4b66      	ldr	r3, [pc, #408]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e50:	22f8      	movs	r2, #248	@ 0xf8
 8000e52:	4393      	bics	r3, r2
 8000e54:	0019      	movs	r1, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	00da      	lsls	r2, r3, #3
 8000e5c:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e62:	e01e      	b.n	8000ea2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e64:	4b60      	ldr	r3, [pc, #384]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e68:	4b5f      	ldr	r3, [pc, #380]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000e70:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e74:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	438a      	bics	r2, r1
 8000e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fce6 	bl	800084c <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e86:	f7ff fce1 	bl	800084c <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0a2      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e98:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d1f1      	bne.n	8000e86 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_RCC_OscConfig+0x4e4>
 8000eaa:	e097      	b.n	8000fdc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eac:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x4f2>
 8000eb8:	e06b      	b.n	8000f92 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d14c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	4b49      	ldr	r3, [pc, #292]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000ec8:	494a      	ldr	r1, [pc, #296]	@ (8000ff4 <HAL_RCC_OscConfig+0x62c>)
 8000eca:	400a      	ands	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fcbd 	bl	800084c <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed8:	f7ff fcb8 	bl	800084c <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e079      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eea:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	049b      	lsls	r3, r3, #18
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efa:	220f      	movs	r2, #15
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f04:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f0a:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff8 <HAL_RCC_OscConfig+0x630>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	0019      	movs	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f20:	430a      	orrs	r2, r1
 8000f22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f24:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	0449      	lsls	r1, r1, #17
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fc8b 	bl	800084c <HAL_GetTick>
 8000f36:	0003      	movs	r3, r0
 8000f38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff fc86 	bl	800084c <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e047      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	049b      	lsls	r3, r3, #18
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x574>
 8000f5a:	e03f      	b.n	8000fdc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f62:	4924      	ldr	r1, [pc, #144]	@ (8000ff4 <HAL_RCC_OscConfig+0x62c>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc70 	bl	800084c <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fc6b 	bl	800084c <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e02c      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	049b      	lsls	r3, r3, #18
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5aa>
 8000f90:	e024      	b.n	8000fdc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e01f      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_RCC_OscConfig+0x620>)
 8000fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	025b      	lsls	r3, r3, #9
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d107      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	23f0      	movs	r3, #240	@ 0xf0
 8000fcc:	039b      	lsls	r3, r3, #14
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b008      	add	sp, #32
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	00001388 	.word	0x00001388
 8000ff0:	efffffff 	.word	0xefffffff
 8000ff4:	feffffff 	.word	0xfeffffff
 8000ff8:	ffc2ffff 	.word	0xffc2ffff

08000ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0b3      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d911      	bls.n	8001042 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b58      	ldr	r3, [pc, #352]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	4393      	bics	r3, r2
 8001026:	0019      	movs	r1, r3
 8001028:	4b55      	ldr	r3, [pc, #340]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	4013      	ands	r3, r2
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e09a      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2202      	movs	r2, #2
 8001048:	4013      	ands	r3, r2
 800104a:	d015      	beq.n	8001078 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2204      	movs	r2, #4
 8001052:	4013      	ands	r3, r2
 8001054:	d006      	beq.n	8001064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001056:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4b4a      	ldr	r3, [pc, #296]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 800105c:	21e0      	movs	r1, #224	@ 0xe0
 800105e:	00c9      	lsls	r1, r1, #3
 8001060:	430a      	orrs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001064:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	22f0      	movs	r2, #240	@ 0xf0
 800106a:	4393      	bics	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	4b44      	ldr	r3, [pc, #272]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 8001074:	430a      	orrs	r2, r1
 8001076:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	4013      	ands	r3, r2
 8001080:	d040      	beq.n	8001104 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b3e      	ldr	r3, [pc, #248]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d114      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e06e      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a2:	4b38      	ldr	r3, [pc, #224]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	049b      	lsls	r3, r3, #18
 80010aa:	4013      	ands	r3, r2
 80010ac:	d108      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e062      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e05b      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c0:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d4:	f7ff fbba 	bl	800084c <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010dc:	e009      	b.n	80010f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010de:	f7ff fbb5 	bl	800084c <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_RCC_ClockConfig+0x18c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e042      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	220c      	movs	r2, #12
 80010f8:	401a      	ands	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	429a      	cmp	r2, r3
 8001102:	d1ec      	bne.n	80010de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d211      	bcs.n	8001136 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	4393      	bics	r3, r2
 800111a:	0019      	movs	r1, r3
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_RCC_ClockConfig+0x184>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	4013      	ands	r3, r2
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e020      	b.n	8001178 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d009      	beq.n	8001154 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_RCC_ClockConfig+0x190>)
 8001146:	4013      	ands	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001154:	f000 f820 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001158:	0001      	movs	r1, r0
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_RCC_ClockConfig+0x188>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	220f      	movs	r2, #15
 8001162:	4013      	ands	r3, r2
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_RCC_ClockConfig+0x194>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	000a      	movs	r2, r1
 800116a:	40da      	lsrs	r2, r3
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_RCC_ClockConfig+0x198>)
 800116e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001170:	2003      	movs	r0, #3
 8001172:	f7ff fb25 	bl	80007c0 <HAL_InitTick>
  
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40022000 	.word	0x40022000
 8001184:	40021000 	.word	0x40021000
 8001188:	00001388 	.word	0x00001388
 800118c:	fffff8ff 	.word	0xfffff8ff
 8001190:	080012b4 	.word	0x080012b4
 8001194:	20000000 	.word	0x20000000

08001198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	220c      	movs	r2, #12
 80011bc:	4013      	ands	r3, r2
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d002      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x30>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x36>
 80011c6:	e02c      	b.n	8001222 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011ca:	613b      	str	r3, [r7, #16]
      break;
 80011cc:	e02c      	b.n	8001228 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	220f      	movs	r2, #15
 80011d4:	4013      	ands	r3, r2
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <HAL_RCC_GetSysClockFreq+0xa4>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	220f      	movs	r2, #15
 80011e2:	4013      	ands	r3, r2
 80011e4:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <HAL_RCC_GetSysClockFreq+0xa8>)
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	4013      	ands	r3, r2
 80011f2:	d009      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	4810      	ldr	r0, [pc, #64]	@ (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011f8:	f7fe ff86 	bl	8000108 <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	001a      	movs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4353      	muls	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e009      	b.n	800121c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	000a      	movs	r2, r1
 800120c:	0152      	lsls	r2, r2, #5
 800120e:	1a52      	subs	r2, r2, r1
 8001210:	0193      	lsls	r3, r2, #6
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	185b      	adds	r3, r3, r1
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
      break;
 8001220:	e002      	b.n	8001228 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001224:	613b      	str	r3, [r7, #16]
      break;
 8001226:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001228:	693b      	ldr	r3, [r7, #16]
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b006      	add	sp, #24
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	40021000 	.word	0x40021000
 8001238:	007a1200 	.word	0x007a1200
 800123c:	080012c4 	.word	0x080012c4
 8001240:	080012d4 	.word	0x080012d4

08001244 <memset>:
 8001244:	0003      	movs	r3, r0
 8001246:	1882      	adds	r2, r0, r2
 8001248:	4293      	cmp	r3, r2
 800124a:	d100      	bne.n	800124e <memset+0xa>
 800124c:	4770      	bx	lr
 800124e:	7019      	strb	r1, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	e7f9      	b.n	8001248 <memset+0x4>

08001254 <__libc_init_array>:
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	2600      	movs	r6, #0
 8001258:	4c0c      	ldr	r4, [pc, #48]	@ (800128c <__libc_init_array+0x38>)
 800125a:	4d0d      	ldr	r5, [pc, #52]	@ (8001290 <__libc_init_array+0x3c>)
 800125c:	1b64      	subs	r4, r4, r5
 800125e:	10a4      	asrs	r4, r4, #2
 8001260:	42a6      	cmp	r6, r4
 8001262:	d109      	bne.n	8001278 <__libc_init_array+0x24>
 8001264:	2600      	movs	r6, #0
 8001266:	f000 f819 	bl	800129c <_init>
 800126a:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <__libc_init_array+0x40>)
 800126c:	4d0a      	ldr	r5, [pc, #40]	@ (8001298 <__libc_init_array+0x44>)
 800126e:	1b64      	subs	r4, r4, r5
 8001270:	10a4      	asrs	r4, r4, #2
 8001272:	42a6      	cmp	r6, r4
 8001274:	d105      	bne.n	8001282 <__libc_init_array+0x2e>
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	00b3      	lsls	r3, r6, #2
 800127a:	58eb      	ldr	r3, [r5, r3]
 800127c:	4798      	blx	r3
 800127e:	3601      	adds	r6, #1
 8001280:	e7ee      	b.n	8001260 <__libc_init_array+0xc>
 8001282:	00b3      	lsls	r3, r6, #2
 8001284:	58eb      	ldr	r3, [r5, r3]
 8001286:	4798      	blx	r3
 8001288:	3601      	adds	r6, #1
 800128a:	e7f2      	b.n	8001272 <__libc_init_array+0x1e>
 800128c:	080012e4 	.word	0x080012e4
 8001290:	080012e4 	.word	0x080012e4
 8001294:	080012e8 	.word	0x080012e8
 8001298:	080012e4 	.word	0x080012e4

0800129c <_init>:
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a2:	bc08      	pop	{r3}
 80012a4:	469e      	mov	lr, r3
 80012a6:	4770      	bx	lr

080012a8 <_fini>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr
